// src/components/Clients/Clients.jsx
import React, { useEffect, useMemo, useState } from "react";
import "./Clients.scss";
import {
  getAll,
  createClient,
  updateClient,
  removeClient,
} from "./clientStore";

const fmtMoney = (v) => (Number(v) || 0).toLocaleString() + " —Å";
const phoneNorm = (p) => (p || "").replace(/[^\d+]/g, "");
const statusRu = (v) => {
  const m = {
    new: "–ù–æ–≤–æ–µ",
    created: "–°–æ–∑–¥–∞–Ω–æ",
    paid: "–û–ø–ª–∞—á–µ–Ω–æ",
    completed: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    canceled: "–û—Ç–º–µ–Ω–µ–Ω–æ",
    active: "–ê–∫—Ç–∏–≤–Ω–æ",
  };
  return m[v] || v || "‚Äî";
};

export default function HostelClients() {
  const [rows, setRows] = useState([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState("");

  const [q, setQ] = useState("");

  // —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–∫—Ç–∞–º (–Ω–∞—à–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –±—Ä–æ–Ω—è-–º–µ—Ç–∫–∏)
  const [objType, setObjType] = useState("all"); // all | hotel | room
  const [objId, setObjId] = useState(""); // –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞/–∑–∞–ª

  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editId, setEditId] = useState(null);

  const [openId, setOpenId] = useState(null); // –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞

  const load = async () => {
    try {
      setLoading(true);
      setErr("");
      const list = await getAll();
      setRows(list);
    } catch (e) {
      console.error(e);
      setErr("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    load();
  }, []);

  // –∏–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏)
  const objectIndex = useMemo(() => {
    const hotels = new Map(); // id -> name
    const rooms = new Map();
    (rows || []).forEach((r) => {
      (r.bookings || []).forEach((b) => {
        if (b.obj_type === "hotel" && b.obj_id) {
          hotels.set(String(b.obj_id), b.obj_name || `ID ${b.obj_id}`);
        } else if (b.obj_type === "room" && b.obj_id) {
          rooms.set(String(b.obj_id), b.obj_name || `ID ${b.obj_id}`);
        }
      });
    });
    return {
      hotels: Array.from(hotels, ([id, name]) => ({ id, name })),
      rooms: Array.from(rooms, ([id, name]) => ({ id, name })),
    };
  }, [rows]);

  const filtered = useMemo(() => {
    const sterm = q.trim().toLowerCase();

    // –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    let res = !sterm
      ? rows
      : rows.filter((r) =>
          `${r.full_name} ${r.phone}`.toLowerCase().includes(sterm)
        );

    // —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞
    if (objType !== "all") {
      res = res.filter((r) =>
        (r.bookings || []).some((b) => b.obj_type === objType)
      );
    }

    // —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
    if (objType !== "all" && objId) {
      const idStr = String(objId);
      res = res.filter((r) =>
        (r.bookings || []).some(
          (b) => b.obj_type === objType && String(b.obj_id) === idStr
        )
      );
    }

    return [...res].sort(
      (a, b) => new Date(b.updated_at || 0) - new Date(a.updated_at || 0)
    );
  }, [rows, q, objType, objId]);

  const onCreate = () => {
    setEditId(null);
    setIsFormOpen(true);
  };
  const onEdit = (id) => {
    setEditId(id);
    setIsFormOpen(true);
  };
  const onDelete = async (id) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞?")) return;
    try {
      await removeClient(id);
      await load();
    } catch (e) {
      console.error(e);
      alert("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
    }
  };

  const onOpenCard = (id) => setOpenId(id);
  const onCloseCard = () => setOpenId(null);

  const lastObjectLabel = (c) => {
    const b = (c.bookings || [])[0];
    if (!b || !b.obj_type) return "‚Äî";
    if (b.obj_type === "hotel") return `–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: ${b.obj_name || b.obj_id}`;
    if (b.obj_type === "room") return `–ó–∞–ª: ${b.obj_name || b.obj_id}`;
    return "‚Äî";
  };

  return (
    <section className="clients">
      <header className="clients__header">
        <div>
          <h2 className="clients__title">–ö–ª–∏–µ–Ω—Ç—ã</h2>
          <p className="clients__subtitle">
            –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π, –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
          </p>
        </div>
        <div className="clients__actions">
          <div className="clients__search">
            <span className="clients__searchIcon">üîé</span>
            <input
              className="clients__searchInput"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É‚Ä¶"
              value={q}
              onChange={(e) => setQ(e.target.value)}
            />
          </div>

          <div className="clients__filterRow">
            <select
              className="clients__input"
              value={objType}
              onChange={(e) => {
                setObjType(e.target.value);
                setObjId("");
              }}
              title="–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞"
            >
              <option value="all">–í—Å–µ –æ–±—ä–µ–∫—Ç—ã</option>
              <option value="hotel">–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã</option>
              <option value="room">–ó–∞–ª—ã</option>
            </select>

            {objType !== "all" && (
              <select
                className="clients__input"
                value={objId}
                onChange={(e) => setObjId(e.target.value)}
                title="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
              >
                <option value="">–í—Å–µ</option>
                {(objType === "hotel"
                  ? objectIndex.hotels
                  : objectIndex.rooms
                ).map((o) => (
                  <option key={o.id} value={o.id}>
                    {o.name}
                  </option>
                ))}
              </select>
            )}
          </div>

          <button
            className="clients__btn clients__btn--primary"
            onClick={onCreate}
          >
            + –ö–ª–∏–µ–Ω—Ç
          </button>
        </div>
      </header>

      {err && <div className="clients__error">{err}</div>}

      <div className="clients__tableWrap">
        <table className="clients__table">
          <thead>
            <tr>
              <th>–ò–º—è</th>
              <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th>–ë—Ä–æ–Ω–∏</th>
              <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç</th>
              <th>–û–±–Ω–æ–≤–ª—ë–Ω</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td className="clients__empty" colSpan={6}>
                  –ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶
                </td>
              </tr>
            ) : filtered.length ? (
              filtered.map((c) => (
                <tr key={c.id}>
                  <td className="ellipsis" title={c.full_name}>
                    {c.full_name || "‚Äî"}
                  </td>
                  <td>{c.phone || "‚Äî"}</td>
                  <td>{c.bookings?.length || 0}</td>
                  <td>{lastObjectLabel(c)}</td>
                  <td>
                    {c.updated_at
                      ? new Date(c.updated_at).toLocaleString()
                      : "‚Äî"}
                  </td>
                  <td className="clients__rowActions">
                    <button
                      className="clients__btn"
                      onClick={() => onOpenCard(c.id)}
                    >
                      –û—Ç–∫—Ä—ã—Ç—å
                    </button>
                    <button
                      className="clients__btn"
                      onClick={() => onEdit(c.id)}
                    >
                      –ò–∑–º.
                    </button>
                    <button
                      className="clients__btn clients__btn--secondary"
                      onClick={() => onDelete(c.id)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td className="clients__empty" colSpan={6}>
                  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {isFormOpen && (
        <ClientForm
          id={editId}
          onClose={() => setIsFormOpen(false)}
          afterSave={load}
          rows={rows}
        />
      )}

      {openId && <ClientCard id={openId} onClose={onCloseCard} rows={rows} />}
    </section>
  );
}

/* ===== –§–æ—Ä–º–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º –ø–æ–ª–µ–π, —Å –±–µ–∫–æ–º) ===== */
function ClientForm({ id, onClose, afterSave, rows }) {
  const editing = !!id;
  const current = editing ? rows.find((c) => c.id === id) : null;

  const [full_name, setFullName] = useState(current?.full_name || "");
  const [phone, setPhone] = useState(current?.phone || "");
  const [notes, setNotes] = useState(current?.notes || "");
  const [err, setErr] = useState("");
  const [saving, setSaving] = useState(false);

  const submit = async (e) => {
    e.preventDefault();
    setErr("");

    if (!full_name.trim()) {
      setErr("–í–≤–µ–¥–∏—Ç–µ –∏–º—è");
      return;
    }

    // –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    const normalizedPhone = phoneNorm(phone);
    const others = (rows || []).filter((c) => !editing || c.id !== id);
    if (
      normalizedPhone &&
      others.some((c) => phoneNorm(c.phone) === normalizedPhone)
    ) {
      setErr("–¢–∞–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –µ—Å—Ç—å");
      return;
    }

    setSaving(true);
    try {
      const dto = {
        full_name: full_name.trim(),
        phone: normalizedPhone,
        notes: notes.trim(),
      };
      if (editing) {
        await updateClient(id, dto);
      } else {
        await createClient(dto);
      }
      await afterSave?.();
      onClose();
    } catch (e2) {
      console.error(e2);
      setErr("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="clients__modalOverlay" onClick={onClose}>
      <div className="clients__modal" onClick={(e) => e.stopPropagation()}>
        <div className="clients__modalHeader">
          <div className="clients__modalTitle">
            {editing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞" : "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"}
          </div>
          <button
            className="clients__iconBtn"
            onClick={onClose}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
          >
            √ó
          </button>
        </div>

        {err && (
          <div className="clients__error" style={{ marginTop: 8 }}>
            {err}
          </div>
        )}

        <form className="clients__form" onSubmit={submit}>
          <div className="clients__formGrid">
            <div className="clients__field">
              <label className="clients__label">–ò–º—è *</label>
              <input
                className="clients__input"
                value={full_name}
                onChange={(e) => setFullName(e.target.value)}
                required
              />
            </div>

            <div className="clients__field">
              <label className="clients__label">–¢–µ–ª–µ—Ñ–æ–Ω</label>
              <input
                className="clients__input"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                placeholder="+996700000000"
              />
            </div>

            <div className="clients__field" style={{ gridColumn: "1/-1" }}>
              <label className="clients__label">–ó–∞–º–µ—Ç–∫–∏</label>
              <textarea
                className="clients__input"
                rows={3}
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
              />
            </div>
          </div>

          <div className="clients__formActions">
            <button
              type="button"
              className="clients__btn"
              onClick={onClose}
              disabled={saving}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="clients__btn clients__btn--primary"
              disabled={saving}
            >
              {saving ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ‚Ä¶" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

/* ===== –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ===== */
function ClientCard({ id, onClose, rows }) {
  const [tab, setTab] = useState("profile");
  const client = rows.find((c) => c.id === id);
  if (!client) return null;

  return (
    <div className="clients__modalOverlay" onClick={onClose}>
      <div className="clients__modalWide" onClick={(e) => e.stopPropagation()}>
        <div className="clients__modalHeader">
          <div className="clients__modalTitle">–ö–ª–∏–µ–Ω—Ç ‚Äî {client.full_name}</div>
          <button
            className="clients__iconBtn"
            onClick={onClose}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
          >
            √ó
          </button>
        </div>

        <div className="clients__cardHeader">
          <div className="clients__profile">
            <div>
              <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {client.phone || "‚Äî"}
            </div>
          </div>
          <div className="clients__stats">
            <div className="clients__statBox">
              <div className="clients__statVal">
                {client.bookings?.length || 0}
              </div>
              <div className="clients__statLabel">–ë—Ä–æ–Ω–∏</div>
            </div>
          </div>
        </div>

        <div className="clients__tabs">
          <button
            className={`clients__tab ${
              tab === "profile" ? "clients__tabActive" : ""
            }`}
            onClick={() => setTab("profile")}
          >
            –ü—Ä–æ—Ñ–∏–ª—å
          </button>
          <button
            className={`clients__tab ${
              tab === "bookings" ? "clients__tabActive" : ""
            }`}
            onClick={() => setTab("bookings")}
          >
            –ë—Ä–æ–Ω–∏
          </button>
        </div>

        {tab === "profile" && (
          <div className="clients__profileBody">
            <div className="clients__notes">
              <strong>–ó–∞–º–µ—Ç–∫–∏:</strong>
              <div className="clients__noteArea">{client.notes || "‚Äî"}</div>
            </div>
            <div className="clients__muted">
              –°–æ–∑–¥–∞–Ω:{" "}
              {client.created_at
                ? new Date(client.created_at).toLocaleString()
                : "‚Äî"}{" "}
              ‚Ä¢ –û–±–Ω–æ–≤–ª—ë–Ω:{" "}
              {client.updated_at
                ? new Date(client.updated_at).toLocaleString()
                : "‚Äî"}
            </div>
          </div>
        )}

        {tab === "bookings" && (
          <div className="clients__tableWrap">
            <table className="clients__table">
              <thead>
                <tr>
                  <th>‚Ññ</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–û–±—ä–µ–∫—Ç</th>
                  <th>–°</th>
                  <th>–ü–æ</th>
                  <th>–°—É–º–º–∞</th>
                </tr>
              </thead>
              <tbody>
                {client.bookings?.length ? (
                  client.bookings.map((b) => (
                    <tr key={b.id}>
                      <td>{b.number || b.id}</td>
                      <td>{statusRu(b.status)}</td>
                      <td>
                        {b.obj_type === "hotel"
                          ? `–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: ${b.obj_name || b.obj_id}`
                          : b.obj_type === "room"
                          ? `–ó–∞–ª: ${b.obj_name || b.obj_id}`
                          : "‚Äî"}
                      </td>
                      <td>{b.from}</td>
                      <td>{b.to}</td>
                      <td>{fmtMoney(b.total)}</td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td className="clients__empty" colSpan={6}>
                      –ù–µ—Ç –±—Ä–æ–Ω–µ–π
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}

        <div className="clients__modalFooter">
          <button className="clients__btn" onClick={onClose}>
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
}
